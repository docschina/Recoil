(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(9),o=(n(0),n(202)),l={title:"selector(options)",sidebar_label:"selector()"},c={id:"api-reference/core/selector",title:"selector(options)",description:'*Selectors* represent a function, or **derived state** in Recoil.  You can think of them as a "pure function" without side-effects that always returns the same value for a given set of dependency values.  If only a `get` function is provided, the selector is read-only and returns a `RecoilValueReadOnly` object.  If a `set` is also provided, it returns a writeable `RecoilState` object.',source:"@site/docs/api-reference/core/selector.md",permalink:"/docs/api-reference/core/selector",editUrl:"https://github.com/docschina/Recoil/edit/docs/docs/docs/api-reference/core/selector.md",sidebar_label:"selector()",sidebar:"someSidebar",previous:{title:"atom(options)",permalink:"/docs/api-reference/core/atom"},next:{title:"class Loadable",permalink:"/docs/api-reference/core/Loadable"}},s=[{value:"Dynamic Dependencies",id:"dynamic-dependencies",children:[]},{value:"Writeable Selectors",id:"writeable-selectors",children:[]},{value:"Asynchronous Selectors",id:"asynchronous-selectors",children:[]},{value:"\u793a\u4f8b (\u540c\u6b65)",id:"\u793a\u4f8b-\u540c\u6b65",children:[]},{value:"\u793a\u4f8b (\u5f02\u6b65)",id:"\u793a\u4f8b-\u5f02\u6b65",children:[]}],i={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Selectors")," represent a function, or ",Object(o.b)("strong",{parentName:"p"},"derived state"),' in Recoil.  You can think of them as a "pure function" without side-effects that always returns the same value for a given set of dependency values.  If only a ',Object(o.b)("inlineCode",{parentName:"p"},"get")," function is provided, the selector is read-only and returns a ",Object(o.b)("inlineCode",{parentName:"p"},"RecoilValueReadOnly")," object.  If a ",Object(o.b)("inlineCode",{parentName:"p"},"set")," is also provided, it returns a writeable ",Object(o.b)("inlineCode",{parentName:"p"},"RecoilState")," object."),Object(o.b)("hr",null),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"function selector<T>({\n  key: string,\n\n  get: ({\n    get: GetRecoilValue\n  }) => T | Promise<T> | RecoilValue<T>,\n\n  set?: (\n    {\n      get: GetRecoilValue,\n      set: SetRecoilState,\n      reset: ResetRecoilState,\n    },\n    newValue: T | DefaultValue,\n  ) => void,\n\n  dangerouslyAllowMutability?: boolean,\n})\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"type ValueOrUpdater<T> = T | DefaultValue | ((prevValue: T) => T | DefaultValue);\ntype GetRecoilValue = <T>(RecoilValue<T>) => T;\ntype SetRecoilState = <T>(RecoilState<T>, ValueOrUpdater<T>) => void;\ntype ResetRecoilState = <T>(RecoilState<T>) => void;\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"key")," - \u4e00\u4e2a\u5728\u5185\u90e8\u7528\u6765\u6807\u8bc6 atom \u7684\u552f\u4e00\u5b57\u7b26\u4e32\u3002\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\uff0c\u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u76f8\u5bf9\u4e8e\u5176\u4ed6 atom \u548c selector \u4fdd\u6301\u552f\u4e00\u3002\u5982\u679c\u7528\u4e8e\u6301\u4e45\u5316\uff0c\u5219\u4ed6\u9700\u8981\u5728\u6574\u4e2a\u6267\u884c\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u7a33\u5b9a\u6027\u3002"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"get")," - A function that evaluates the value for the derived state.  It may return either a value directly or an asynchronous ",Object(o.b)("inlineCode",{parentName:"li"},"Promise")," or another atom or selector representing the same type.  It is passed an object as the first parameter containing the following properties:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"get")," - \u4e00\u4e2a\u7528\u6765\u4ece\u5176\u4ed6 atom \u6216 selector \u83b7\u53d6\u503c\u7684\u51fd\u6570\u3002\u6240\u6709\u4f20\u5165\u8be5\u51fd\u6570\u7684 atom \u6216 selector \u5c06\u4f1a\u9690\u5f0f\u5730\u88ab\u6dfb\u52a0\u5230\u6b64 selector \u7684\u4e00\u4e2a",Object(o.b)("strong",{parentName:"li"},"\u4f9d\u8d56"),"\u5217\u8868\u4e2d\u3002\u5982\u679c\u8fd9\u4e2a selector \u7684\u4efb\u4f55\u4e00\u4e2a\u4f9d\u8d56\u53d1\u751f\u6539\u53d8\uff0c\u8fd9\u4e2a selector \u5c31\u4f1a\u91cd\u65b0\u8ba1\u7b97\u503c\u3002"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"set?")," - \u5982\u679c\u8bbe\u7f6e\u4e86\u8be5\u5c5e\u6027\uff0cselector \u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a",Object(o.b)("strong",{parentName:"li"},"\u53ef\u5199"),"\u7684 state\u3002\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u7684\u5bf9\u8c61\u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ee5\u53ca\u4e00\u4e2a\u65b0\u503c\u3002\u65b0\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a ",Object(o.b)("inlineCode",{parentName:"li"},"T")," \u7c7b\u578b\u7684\u503c\uff0c\u5982\u679c\u7528\u6237\u91cd\u7f6e\u4e86 selector\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a ",Object(o.b)("inlineCode",{parentName:"li"},"DefaultValue")," \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u8be5\u56de\u8c03\u51fd\u6570\u5305\u542b\u4e86\uff1a",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"get")," - \u4e00\u4e2a\u7528\u6765\u4ece\u5176\u4ed6 atom \u6216 selector \u83b7\u53d6\u503c\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u4e0d\u4f1a\u4e3a selector \u8ba2\u9605\u7ed9\u5b9a\u7684 atom \u6216 selector\u3002"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"set")," - \u4e00\u4e2a\u7528\u6765\u8bbe\u7f6e Recoil \u72b6\u6001\u7684\u51fd\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Recoil \u7684 state\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b0\u7684\u503c\u3002\u65b0\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u66f4\u65b0\u51fd\u6570\uff0c\u6216\u4e00\u4e2a ",Object(o.b)("inlineCode",{parentName:"li"},"DefaultValue")," \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7528\u4ee5\u4f20\u9012\u66f4\u65b0\u64cd\u4f5c\u3002"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"dangerouslyAllowMutability"),' - Selectors represent "pure functions" of derived state and should always return the same value for the same set of dependency input values.  To help protect this all values stored in a selector are frozen by default.  In some cases this may need to be overriden using this option.')),Object(o.b)("hr",null),Object(o.b)("p",null,"A selector with a simple static dependency:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const mySelector = selector({\n  key: 'MySelector',\n  get: ({get}) => get(myAtom) * 100,\n});\n")),Object(o.b)("h3",{id:"dynamic-dependencies"},"Dynamic Dependencies"),Object(o.b)("p",null,"A read-only selector has a ",Object(o.b)("inlineCode",{parentName:"p"},"get")," method which evaluates the value of the selector based on dependencies.  If any of those dependencies are updated, then the selector will re-evaluate.  The dependencies are dynamically determined based on the atoms or selectors you actually use when evaluating the selector.  Depending on the values of the previous dependencies, you may dynamically use different additional dependencies.  Recoil will automatically update the current data-flow graph so that the selector is only subscribed to updates from the current set of dependencies"),Object(o.b)("p",null,"In this example ",Object(o.b)("inlineCode",{parentName:"p"},"mySelector")," will depend on the ",Object(o.b)("inlineCode",{parentName:"p"},"toggleState")," atom as well as either ",Object(o.b)("inlineCode",{parentName:"p"},"selectorA")," or ",Object(o.b)("inlineCode",{parentName:"p"},"selectorB")," depending on the state of ",Object(o.b)("inlineCode",{parentName:"p"},"toggleState"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const toggleState = atom({key: 'Toggle', default: false});\n\nconst mySelector = selector({\n  key: 'MySelector',\n  get: ({get}) => {\n    const toggle = get(toggleState);\n    if (toggle) {\n      return get(selectorA);\n    } else {\n      return get(selectorB);\n    }\n  },\n});\n")),Object(o.b)("h3",{id:"writeable-selectors"},"Writeable Selectors"),Object(o.b)("p",null,"A bi-directional selector receives the incoming value as a parameter and can use that to propagate the changes back upstream along the data-flow graph.  Because the user may either set the selector with a new value or reset the selector, the incoming value is either of the same type that the selector represents or a ",Object(o.b)("inlineCode",{parentName:"p"},"DefaultValue")," object which represents a reset action."),Object(o.b)("p",null,"This simple selector essentially wraps an atom to add an additional field.  It just passes through set and reset operations to the upstream atom."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const proxySelector = selector({\n  key: 'ProxySelector',\n  get: ({get}) => ({...get(myAtom), extraField: 'hi'}),\n  set: ({set}, newValue) => set(myAtom, newValue),\n});\n")),Object(o.b)("p",null,"This selector transforms the data, so needs to check if the incoming value is a ",Object(o.b)("inlineCode",{parentName:"p"},"DefaultValue"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const transformSelector = selector({\n  key: 'TransformSelector',\n  get: ({get}) => get(myAtom) * 100,\n  set: ({set}, newValue) =>\n    set(myAtom, newValue instanceof DefaultValue ? newValue : newValue / 100),\n});\n")),Object(o.b)("h3",{id:"asynchronous-selectors"},"Asynchronous Selectors"),Object(o.b)("p",null,"Selectors may also have asynchronous evaluation functions and return a ",Object(o.b)("inlineCode",{parentName:"p"},"Promise")," to the output value.  Please see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/asynchronous-data-queries"}),"this guide")," for more information."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const myQuery = selector({\n  key: 'MyQuery',\n  get: async ({get}) => {\n    return await myAsyncQuery(get(queryParamState));\n  }\n});\n")),Object(o.b)("h3",{id:"\u793a\u4f8b-\u540c\u6b65"},"\u793a\u4f8b (\u540c\u6b65)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import {atom, selector, useRecoilState, DefaultValue} from 'recoil';\n\nconst tempFahrenheit = atom({\n  key: 'tempFahrenheit',\n  default: 32,\n});\n\nconst tempCelcius = selector({\n  key: 'tempCelcius',\n  get: ({get}) => ((get(tempFahrenheit) - 32) * 5) / 9,\n  set: ({set}, newValue) =>\n    set(\n      tempFahrenheit,\n      newValue instanceof DefaultValue ? newValue : (newValue * 9) / 5 + 32\n    ),\n});\n\nfunction TempCelcius() {\n  const [tempF, setTempF] = useRecoilState(tempFahrenheit);\n  const [tempC, setTempC] = useRecoilState(tempCelcius);\n  const resetTemp = useResetRecoilState(tempCelcius);\n\n  const addTenCelcius = () => setTempC(tempC + 10);\n  const addTenFahrenheit = () => setTempF(tempF + 10);\n  const reset = () => resetTemp();\n\n  return (\n    <div>\n      Temp (Celcius): {tempC}\n      <br />\n      Temp (Fahrenheit): {tempF}\n      <br />\n      <button onClick={addTenCelcius}>Add 10 Celcius</button>\n      <br />\n      <button onClick={addTenFahrenheit}>Add 10 Fahrenheit</button>\n      <br />\n      <button onClick={reset}>>Reset</button>\n    </div>\n  );\n}\n")),Object(o.b)("h3",{id:"\u793a\u4f8b-\u5f02\u6b65"},"\u793a\u4f8b (\u5f02\u6b65)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import {selector, useRecoilValue} from 'recoil';\n\nconst myQuery = selector({\n  key: 'MyDBQuery',\n  get: async () => {\n    const response = await fetch(getMyRequestUrl());\n    return response.json();\n  },\n});\n\nfunction QueryResults() {\n  const queryResults = useRecoilValue(myQuery);\n\n  return (\n    <div>\n      {queryResults.foo}\n    </div>\n  );\n}\n\nfunction ResultsSection() {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <QueryResults />\n    </React.Suspense>\n  );\n}\n")),Object(o.b)("p",null,"\u66f4\u591a\u590d\u6742\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u8003",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/asynchronous-data-queries"}),"\u8fd9\u7bc7\u6307\u5357"),"\u3002"))}u.isMDXComponent=!0},202:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),u=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(l,".").concat(d)]||p[d]||b[d]||o;return n?r.a.createElement(m,c({ref:t},i,{components:n})):r.a.createElement(m,c({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);