(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{180:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(1),o=a(9),r=(a(0),a(202)),s={title:"class Snapshot",sidebar_label:"Snapshot"},i={id:"api-reference/core/Snapshot",title:"class Snapshot",description:"A `Snapshot` object represents an immutable snapshot of the state of Recoil [atoms](/docs/api-reference/core/atom).  It is intended to standardize the API for observing, inspecting, and managing global Recoil state.  It is mostly useful for dev tools, global state synchronization, history navigation, etc.",source:"@site/docs/api-reference/core/Snapshot.md",permalink:"/docs/api-reference/core/Snapshot",editUrl:"https://github.com/docschina/Recoil/edit/docs/docs/docs/api-reference/core/Snapshot.md",sidebar_label:"Snapshot",sidebar:"someSidebar",previous:{title:"useRecoilStateLoadable(state)",permalink:"/docs/api-reference/core/useRecoilStateLoadable"},next:{title:"useRecoilCallback(callback, deps)",permalink:"/docs/api-reference/core/useRecoilCallback"}},c=[{value:"Reading Snapshots",id:"reading-snapshots",children:[]},{value:"Transforming Snapshots",id:"transforming-snapshots",children:[]},{value:"Hooks",id:"hooks",children:[]},{value:"State Initialization",id:"state-initialization",children:[]},{value:"Example",id:"example",children:[]}],l={rightToc:c};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Snapshot")," object represents an immutable snapshot of the state of Recoil ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api-reference/core/atom"}),"atoms"),".  It is intended to standardize the API for observing, inspecting, and managing global Recoil state.  It is mostly useful for dev tools, global state synchronization, history navigation, etc."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"class Snapshot {\n  getLoadable: <T>(RecoilValue<T>) => Loadable<T>;\n  getPromise: <T>(RecoilValue<T>) => Promise<T>;\n\n  map: (MutableSnapshot => void) => Snapshot;\n  asyncMap: (MutableSnapshot => Promise<void>) => Promise<Snapshot>;\n}\n")),Object(r.b)("h3",{id:"reading-snapshots"},"Reading Snapshots"),Object(r.b)("p",null,"Snapshots are read-only with respect to atom state.  They can be used to read atom state and evaluate selectors' derived state.  The ",Object(r.b)("inlineCode",{parentName:"p"},"getPromise()")," method can be used to wait for the evaluated value of asynchronous selectors, so you can see what the value would be based on the static atom state."),Object(r.b)("h3",{id:"transforming-snapshots"},"Transforming Snapshots"),Object(r.b)("p",null,"There are cases where you may wish to mutate a snapshot.  While snapshots are immutable, they have methods to map themselves with a set of transformations to a new immutable snapshot.  The map methods take a callback that is passed a MutableSnapshot, which is mutated throughout the callback and will ultimately become the new snapshot returned by the mapping operation."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"class MutableSnapshot {\n  set: <T>(RecoilState<T>, T | DefaultValue | (T => T | DefaultValue)) => void;\n  reset: <T>(RecoilState<T>) => void;\n}\n")),Object(r.b)("p",null,"Notice that ",Object(r.b)("inlineCode",{parentName:"p"},"set()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"reset()")," have the same signature as callbacks provided to a writeable selector's ",Object(r.b)("inlineCode",{parentName:"p"},"set")," property, but they only effect the new snapshot, not the current state."),Object(r.b)("h3",{id:"hooks"},"Hooks"),Object(r.b)("p",null,"Recoil has the following hooks for working with snapshots:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api-reference/core/useRecoilCallback"}),Object(r.b)("inlineCode",{parentName:"a"},"useRecoilCallback()"))," - Asynchronous access to snapshot"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api-reference/core/useRecoilSnapshot"}),Object(r.b)("inlineCode",{parentName:"a"},"useRecoilSnapshot()"))," - Synchronous access to snapshot"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api-reference/core/useRecoilTransactionObserver"}),Object(r.b)("inlineCode",{parentName:"a"},"useRecoilTransactionObserver()"))," - Subscribe to snapshots for all state changes"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api-reference/core/useGotoRecoilSnapshot"}),Object(r.b)("inlineCode",{parentName:"a"},"useGotoRecoilSnapshot()"))," - Update current state to match snapshot")),Object(r.b)("h3",{id:"state-initialization"},"State Initialization"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api-reference/core/RecoilRoot"}),Object(r.b)("inlineCode",{parentName:"a"},"<RecoilRoot>"))," component takes an ",Object(r.b)("inlineCode",{parentName:"p"},"initializeState")," prop for initializing the global state via a ",Object(r.b)("inlineCode",{parentName:"p"},"MutableSnapshot"),".  This can be helpful for loading persisted state when you know all atoms in advance and is compatible with server-side rendering where the state should be setup synchronously with the initial render.  For most state initialization and persistence, though, consider Atom Effects."),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'function MyComponent() {\n  const logState = useRecoilCallback(({snapshot}) => () => {\n    console.log("State: ", snapshot.getLoadable(myAtom).contents);\n\n    const newSnapshot = snapshot.map(({set}) => set(myAtom, 42));\n  });\n}\n')))}p.isMDXComponent=!0},202:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},b=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(a),h=n,d=b["".concat(s,".").concat(h)]||b[h]||u[h]||r;return a?o.a.createElement(d,i({ref:t},l,{components:a})):o.a.createElement(d,i({ref:t},l))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);